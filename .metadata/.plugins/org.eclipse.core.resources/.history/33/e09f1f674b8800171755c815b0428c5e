package net.meme;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class Display extends JPanel implements Runnable {
	
	private static final long serialVersionUID = 1L;
	
	public static final int width = 800, height = 600;
	public float scale = 1;
	public static final String title = "your fat";
	public static final int fpsCap = 90;
	public static Display instance;
	public JFrame frame;
	public BufferedImage view;
			
	private Thread thread;
			
	private boolean running = false;
	
	public int fps;
	public int tps;
	
	private int lastW = width, lastH = height;
				
	private Display(){
		init();
		start();
	}
	
	private void init(){
		Dimension size = new Dimension(width, height);
		this.setPreferredSize(size);
		this.setMaximumSize(size);
		this.setMinimumSize(size);
		
		view = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		
		frame = new JFrame(title);
		frame.add(this);
		frame.setResizable(true);
		frame.setSize(size);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	public synchronized void start(){
		if(running) return;
		running = true;
	
		if(thread == null) thread = new Thread(this);
				
		thread.start();
	}
	
	public synchronized void stop(){
		if(!running) return;
		running = false;
		
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	//tick
	@Override
	public void run() {
		long lastTime = System.nanoTime();
		double nsPerTick = 1000000000D / fpsCap;
		
		int ticks = 0;
		int frames = 0;
		
		long lastTimer = System.currentTimeMillis();
		double delta = 0;
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / nsPerTick;
			lastTime = now;
			
			boolean shouldRender = false;
			
			while(delta >= 1){
				ticks++;
				tick();
				delta--;
				shouldRender = true;
			}
			
			try {
				Thread.sleep(2);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			if(shouldRender){
				frames++;
				render(view.getGraphics());
				repaint();
			}
			
			if(System.currentTimeMillis() - lastTimer >= 1000){
				lastTimer += 1000;
				
				fps = frames;
				tps = ticks;
				
				frames = 0;
				ticks = 0;
			}
		}
		
		stop();
	}
	
	private void tick(){
		/*if(frame.getWidth() >= width*2 && frame.getHeight() >= height*2){
			scale = 2;
			frame.setResizable(true);
		}else if(frame.getWidth() < width || frame.getHeight() < height){
			scale = 0.5f;
		}else{
			scale = 1;
			frame.setResizable(true);
		}*/
		if(frame.getWidth() < lastW || frame.getHeight() < lastH){
			scale/=2;
			if(scale < 0.5f) scale = 0.5f;
		}else if(frame.getWidth() > lastW || frame.getHeight() < lastH){
			scale*=2;
			if(scale > 2) scale = 2;
		}
		
		Dimension size = new Dimension((int)(width*scale), (int)(height*scale));
		this.setPreferredSize(size);
		this.setMaximumSize(size);
		this.setMinimumSize(size);
		frame.pack();
	}
	
	private void render(Graphics g){
		int num = (int)(Math.random()*100);
		g.setColor(Color.red);
		g.fillRect((int)(num*scale), 0, (int)(10*scale), (int)(10*scale));
	}
	
	public void paint(Graphics g){
		this.setBackground(Color.white);
		g.clearRect(0, 0, width, height);
		g.drawImage(view, 0, 0, null);
		view.getGraphics().dispose();
		view.getGraphics().clearRect(0, 0, view.getWidth(), view.getHeight());
	}
	
	public static void main(String[] args){
		instance = new Display();
	}

}
